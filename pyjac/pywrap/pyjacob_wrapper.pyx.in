# distutils: language = c++

import cython
import numpy as np
cimport numpy as np
from libcpp cimport bool as bool_t  # noqa
from libcpp.string cimport string as string_t # noqa
from libcpp.vector cimport vector # noqa

'''[[[cog
from six.moves import cPickle as pickle
from pyjac.utils import indent, stdindent, header_ext
from pyjac.kernel_utils.tools import make_doc_str

with open(wrappergen, 'rb') as file:
    wrappergen = pickle.load(file)

kernel_args =  ', '.join(['double* {}'.format(x) for x in wrappergen.kernel_args])
kernel_name = '{name}Kernel'.format(name=wrappergen.name.title())
# write Cython defns
cog.outl("""
cdef extern from "{name}_main{ext}":
    cdef cppclass {kernel_name}:
        {kernel_name}() except +
        {kernel_name}(size_t, size_t, bool_t) except +

        vector[const char*] speciesNames() except+
        vector[const char*] reactionStrings() except+
        vector[const char*] jacobianStrings() except+
        unsigned int numSpecies() except +
        unsigned int numReactions() except +
        unsigned int requiredMemorySize() except +
        string_t order() except+
        void resize(size_t, size_t, bool_t) except +
        void operator()({args}) except +
    """.format(name=wrappergen.name, kernel_name=kernel_name, args=kernel_args,
               ext=header_ext[wrappergen.lang]),
        trimblanklines=True, dedent=False)
   ]]]
[[[end]]]'''


'''[[[cog
# and write the python wrapper class
# get args
numpy_args = []
args = []
for arg in wrappergen.kernel_args:
    numpy_args.append('np.ndarray[np.float64_t] {name}'.format(name=arg))
    args.append('&{arg}[0]'.format(arg=arg))
numpy_args = ', '.join(numpy_args)
args = ', '.join(args)

cog.out("""
cdef class Py{name}:
    cdef {name} kernel  # hold our kernel

    def __cinit__(self, size_t problem_size, size_t work_size,
                  bool_t do_not_compile=False, **kwargs):
        if not kwargs.pop('testing_only_skip_compilation', False):
            self.kernel.resize(problem_size, work_size, do_not_compile)

    def species_names(self):
        species = self.kernel.speciesNames()
        return [x.decode('UTF-8') for x in species]

    def reaction_strings(self):
        rxns = self.kernel.reactionStrings()
        return [x.decode('UTF-8') for x in rxns]

    def num_reactions(self):
        return self.kernel.numReactions()

    def num_species(self):
        return self.kernel.numSpecies()

    def jacobian_strings(self):
        return self.kernel.jacobianStrings()

    def required_working_memory(self):
        return self.kernel.requiredMemorySize()

    def resize(self, np.uint_t problem_size, np.uint_t work_size,
               bool_t do_not_compile=False):""".format(name=kernel_name))
cog.out(indent(
  make_doc_str(wrappergen, ['problem_size', 'work_size', 'do_not_compile'],
                      'Resize the {} memory buffers'.format(wrappergen.lang.title()),
                      comment_type='python'), 2 * stdindent))
cog.outl("""
        self.kernel.resize(problem_size, work_size, do_not_compile)

    def __call__(self, {numpy_args}):
        self.kernel({args})
""".format(numpy_args=numpy_args, args=args))
]]]
[[[end]]]'''
